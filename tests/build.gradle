// Gradle script to build and run the "test" subproject of jme3-utilities

// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

plugins {
    id 'application' // to build JVM applications
}

dependencies {
    implementation(libs.commons.exec)

    implementation(libs.heart)
    implementation(libs.acorus)
    runtimeOnly(libs.nifty.style.black)
    runtimeOnly(libs.jme3.awt.dialogs)
    runtimeOnly(libs.jme3.desktop)
    implementation(libs.jme3.lwjgl3)

    // "tests" doesn't use jme3-jogg nor jme3-plugins
    //  -- they are included solely to avoid runtime warnings from AssetConfig:
    runtimeOnly(libs.jme3.jogg)
    runtimeOnly(libs.jme3.plugins)

    //implementation "com.github.stephengold:jme3-utilities-nifty:$jme3utilitiesniftyVersion" // for published library
    implementation project(':nifty') // for local library build

    //implementation "com.github.stephengold:jme3-utilities-x:$jme3utilitiesxVersion" // for published library
    implementation project(':x') // for local library build
}

startScripts.dependsOn(':nifty:assemble')

// Register cleanup tasks:

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSandbox', 'cleanSOs')

tasks.register('cleanDLLs', Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) { // extracted macOS native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
tasks.register('cleanLogs', Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
tasks.register('cleanSandbox', Delete) { // Acorus sandbox
    delete 'Written Assets'
}
tasks.register('cleanSOs', Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}

// Register tasks to run specific apps:

tasks.register('TestPolygon3f', JavaExec) {
    mainClass = 'jme3utilities.math.test.TestPolygon3f'
}
tasks.register('TestMyShell3f', JavaExec) {
    mainClass = 'jme3utilities.math.test.TestShell3f'
}

tasks.register('AppChooser', JavaExec) {
    mainClass = 'jme3utilities.nifty.test.AppChooser'
}

tasks.register('ClockDemo', JavaExec) {
    mainClass = 'jme3utilities.nifty.test.ClockDemo'
}
tasks.register('TestBindScreen', JavaExec) {
    mainClass = 'jme3utilities.nifty.test.TestBindScreen'
}
tasks.register('TestMultipleScreens', JavaExec) {
    mainClass = 'jme3utilities.nifty.test.TestMultipleScreens'
}
tasks.register('TestMultipleWindows', JavaExec) {
    mainClass = 'jme3utilities.nifty.test.TestMultipleWindows'
}
tasks.register('TestPopups', JavaExec) {
    mainClass = 'jme3utilities.nifty.test.popups.TestPopups'
}