// Gradle settings and tasks common to all jme3-utilities subprojects

apply plugin: 'checkstyle'
apply plugin: 'java'

ext {
    group = 'com.github.stephengold'
    websiteUrl = 'https://github.com/stephengold/jme3-utilities'

    // module coordinates of external dependencies:
    acorusCoordinates = 'com.github.stephengold:Acorus:1.0.0'
    heartCoordinates = 'com.github.stephengold:Heart:8.4.0'

    // current versions of libraries:
    jme3utilitiesniftyVersion = '0.9.36-SNAPSHOT'
    jme3utilitiesxVersion = '0.3.3-SNAPSHOT'
    jme3Version = '3.6.0-stable'
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_8

checkstyle {
    toolVersion '9.3'
}

tasks.withType(JavaCompile) { // Java compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
        // Suppress warnings that source value 7 is obsolete.
        options.compilerArgs << '-Xlint:-options'
    }
    options.compilerArgs << '-Xlint:unchecked'
    //options.deprecation = true // to provide detailed deprecation warnings
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_10)) {
        options.release = 8
    }
}

tasks.withType(JavaExec) { // Java runtime options:
    //args '--verbose' // to enable additional log output
    classpath sourceSets.main.runtimeClasspath
    dependsOn 'installDist'
    enableAssertions true
    //jvmArgs '-verbose:gc'
    //jvmArgs '-Xms512m', '-Xmx512m' // to enlarge the Java heap
    //jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds' // to disable caching of SNAPSHOTs
}
repositories {
    //mavenLocal() // to find local SNAPSHOTs of libraries
    mavenCentral()
    //maven { url 'https://s01.oss.sonatype.org/content/groups/staging' } // to find libraries staged but not yet released
}

// custom tasks for creating source/javadoc JARs:

tasks.register('javadocJar', Jar) {
    archiveClassifier = 'javadoc'
    dependsOn 'javadoc'
    description 'Creates a JAR of javadoc.'
    from javadoc.destinationDir
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    description 'Creates a JAR of sourcecode.'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from sourceSets.main.allJava
}
