// Gradle script to build the "nifty" subproject of jme3-utilities

// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

plugins {
    id 'java-library'  // to build JVM libraries
    id 'maven-publish' // to publish artifacts to Maven repositories
    id 'signing'       // to sign artifacts for publication
}

ext {
    artifact = 'jme3-utilities-nifty'
    version = jme3utilitiesniftyVersion
    baseName = "${artifact}-${version}" // for artifacts
}

dependencies {
    api(libs.nifty)
    api(libs.nifty.controls)

    api(libs.heart)
    api(libs.acorus)
}

java {
    withJavadocJar()
}

javadoc {
    // Disable doclint for JDK15+ to avoid "no comment" warnings.
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_15)) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

// Register publishing tasks:

tasks.register('install') {
    dependsOn 'publishMavenPublicationToMavenLocal'
    description = 'Installs Maven artifacts to the local repository.'
}
tasks.register('release') {
    dependsOn 'publishMavenPublicationToOSSRHRepository'
    description = 'Stages Maven artifacts to Sonatype OSSRH.'
}

jar {
    archiveBaseName = project.ext.baseName
    doLast {
        println "using Java ${JavaVersion.current()} (${System.getProperty("java.vendor")})"
    }
    manifest {
        attributes 'Created-By': "${JavaVersion.current()} (${System.getProperty("java.vendor")})"
    }
}
javadocJar { archiveBaseName = project.ext.baseName }
sourcesJar { archiveBaseName = project.ext.baseName }

assemble.dependsOn('module', 'moduleAsc', 'pom', 'pomAsc')
tasks.register('module', Copy) {
    dependsOn 'generateMetadataFileForMavenPublication'
    description = 'Copies the module metadata to build/libs.'
    from "${buildDir}/publications/maven/module.json"
    into "${buildDir}/libs"
    rename 'module.json', project.ext.baseName + '.module'
}
tasks.register('moduleAsc', Copy) {
    dependsOn 'signMavenPublication'
    description = 'Copies the signature of the module metadata to build/libs.'
    from "${buildDir}/publications/maven/module.json.asc"
    into "${buildDir}/libs"
    rename 'module.json.asc', project.ext.baseName + '.module.asc'
}
tasks.register('pom', Copy) {
    dependsOn 'generatePomFileForMavenPublication'
    description = 'Copies the Maven POM to build/libs.'
    from "${buildDir}/publications/maven/pom-default.xml"
    into "${buildDir}/libs"
    rename 'pom-default.xml', project.ext.baseName + '.pom'
}
tasks.register('pomAsc', Copy) {
    dependsOn 'signMavenPublication'
    description = 'Copies the signature of the Maven POM to build/libs.'
    from "${buildDir}/publications/maven/pom-default.xml.asc"
    into "${buildDir}/libs"
    rename 'pom-default.xml.asc', project.ext.baseName + '.pom.asc'
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact sourcesJar
            artifactId = artifact
            from components.java
            groupId = rootProject.ext.group
            pom {
                description = 'A NiftyGUI library for jMonkeyEngine.'
                developers {
                    developer {
                        email = 'sgold@sonic.net'
                        name = 'Stephen Gold'
                    }
                }
                licenses {
                    license {
                        distribution = 'repo'
                        name = 'New BSD (3-clause) License'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
                name = rootProject.ext.group + ':' + artifact
                scm {
                    connection = 'scm:git:git://github.com/stephengold/jme3-utilities.git'
                    developerConnection = 'scm:git:ssh://github.com:stephengold/jme3-utilities.git'
                    url = rootProject.ext.websiteUrl + '/tree/master'
                }
                url = rootProject.ext.websiteUrl
            }
            version = project.ext.version
        }
    }
    // Staging to OSSRH relies on the existence of 2 properties
    // (ossrhUsername and ossrhPassword)
    // which should be stored in ~/.gradle/gradle.properties
    repositories {
        maven {
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : 'Unknown user'
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : 'Unknown password'
            }
            name = 'OSSRH'
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2'
        }
    }
}
generateMetadataFileForMavenPublication.dependsOn('pom')
publishMavenPublicationToMavenLocal.dependsOn('assemble')
publishMavenPublicationToMavenLocal.doLast {
    println 'installed locally as ' + baseName
}
publishMavenPublicationToOSSRHRepository.dependsOn('assemble')

// Register signing tasks:

// Signing relies on the existence of 3 properties
// (signing.keyId, signing.password, and signing.secretKeyRingFile)
// which should be stored in ~/.gradle/gradle.properties

signing {
    sign publishing.publications.maven
}
tasks.withType(Sign) {
    onlyIf { rootProject.hasProperty('signing.keyId') }
}
signMavenPublication.dependsOn('module')