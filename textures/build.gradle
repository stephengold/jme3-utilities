// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

description = 'generate texture assets used by SkyControl'
ext {
    bsc = 'src/main/resources/bsc5.dat'
    skies = '../SkyControl/src/main/resources/Textures/skies'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir '../SkyControl/src/main/java'
        }
    }
}

dependencies {
    implementation "com.beust:jcommander:$jcommanderVersion"
    implementation "jme3utilities:jme3-utilities-heart:$jme3utilitiesheartVersion"
    implementation "org.jmonkeyengine:jme3-core:$jmonkeyengineVersion"
    implementation "org.jmonkeyengine:jme3-effects:$jmonkeyengineVersion"
}

clean {
    dependsOn 'cleanCatalog'
    dependsOn 'cleanDownload'
    dependsOn 'cleanSkyTextures'
}

// decompress the Yale Bright Star Catalog

task catalog {
    dependsOn 'download'
    doLast { file(bsc).text = resources.gzip("${bsc}.gz").read().text }
}
task cleanCatalog(type: Delete) {
    delete file(bsc)
}

// download gzipped Yale Bright Star Catalog

task download(type: MyDownload) {
    sourceUrl = 'http://tdc-www.harvard.edu/catalogs/bsc5.dat.gz'
    target = file("${bsc}.gz")
}
task cleanDownload(type: Delete) {
    delete file("${bsc}.gz")
}

// generate sky textures

task skyTextures {
    dependsOn = ['clouds', 'equator', 'equator16m', 'moons', 'north', \
        'north16m',  'ramps', 'south', 'south16m', 'suns', 'wiltshire', \
        'wiltshire16m']
    description 'generate texture assets distributed with SkyControl'
}
task cleanSkyTextures(type:Delete) {
    delete fileTree(dir: skies)
}

task clouds(type: JavaExec) {
    main 'jme3utilities.sky.textures.MakeClouds'
    outputs.files(["$skies/clouds/clear.png", \
                   "$skies/clouds/fbm.png", \
                   "$skies/clouds/overcast.png"])
}
task debugEquator(type: JavaExec) {
    args = ['-c', '-p', 'equator']
    debug true
    dependsOn catalog
    inputs.files(bsc)
    main 'jme3utilities.sky.textures.MakeStarMaps'
}
task equator(type: JavaExec) {
    args = ['-c', '-p', 'equator']
    dependsOn catalog
    inputs.files(bsc)
    main 'jme3utilities.sky.textures.MakeStarMaps'
    outputs.files(fileTree("$skies/star-maps/equator"))
}
task equator16m(type: JavaExec) {
    args = ['-c', '-p', 'equator_16m']
    dependsOn catalog
    inputs.files(bsc)
    main 'jme3utilities.sky.textures.MakeStarMaps'
    outputs.files(fileTree("$skies/star-maps/equator16m"))
}
task moons(type: JavaExec) {
    main 'jme3utilities.sky.textures.MakeMoons'
    outputs.files(fileTree("$skies/moon-nonviral"))
}
task north(type: JavaExec) {
    args = ['-p', 'north']
    dependsOn catalog
    inputs.files(bsc)
    main 'jme3utilities.sky.textures.MakeStarMaps'
    outputs.files("$skies/star-maps/northern.png")
}
task north16m(type: JavaExec) {
    args = ['-p', 'north_16m']
    dependsOn catalog
    inputs.files(bsc)
    main 'jme3utilities.sky.textures.MakeStarMaps'
    outputs.files("$skies/star-maps/16m/northern.png")
}
task ramps(type: JavaExec) {
    main 'jme3utilities.sky.textures.MakeRamps'
    outputs.files("$skies/ramps/haze.png")
}
task south(type: JavaExec) {
    args = ['-p', 'south']
    dependsOn catalog
    inputs.files(bsc)
    main 'jme3utilities.sky.textures.MakeStarMaps'
    outputs.files("$skies/star-maps/southern.png")
}
task south16m(type: JavaExec) {
    args = ['-p', 'south_16m']
    dependsOn catalog
    inputs.files(bsc)
    main 'jme3utilities.sky.textures.MakeStarMaps'
    outputs.files("$skies/star-maps/16m/southern.png")
}
task suns(type: JavaExec) {
    main 'jme3utilities.sky.textures.MakeSun'
    outputs.files(fileTree("$skies/suns"))
}
task wiltshire(type: JavaExec) {
    args = ['-p', 'wiltshire']
    dependsOn catalog
    inputs.files(bsc)
    main 'jme3utilities.sky.textures.MakeStarMaps'
    outputs.files("$skies/star-maps/wiltshire.png")
}
task wiltshire16m(type: JavaExec) {
    args = ['-p', 'wiltshire_16m']
    dependsOn catalog
    inputs.files(bsc)
    main 'jme3utilities.sky.textures.MakeStarMaps'
    outputs.files("$skies/star-maps/16m/wiltshire.png")
}

// Helper class to wrap Ant download task
class MyDownload extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        ant.get(src: sourceUrl, dest: target)
    }
}